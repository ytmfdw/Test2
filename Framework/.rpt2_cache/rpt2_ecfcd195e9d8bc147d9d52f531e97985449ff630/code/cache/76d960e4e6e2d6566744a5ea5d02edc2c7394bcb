{
  "code": "import Log from \"./Log\";\r\nimport { AppConfig } from \"../AppConfig\";\r\nimport UiManager from \"../UiManager\";\r\nexport var Common;\r\n(function (Common) {\r\n    function formatDate(date, fmt) {\r\n        var o = {\r\n            \"M+\": date.getMonth() + 1,\r\n            \"d+\": date.getDate(),\r\n            \"h+\": date.getHours(),\r\n            \"m+\": date.getMinutes(),\r\n            \"s+\": date.getSeconds(),\r\n            \"q+\": Math.floor((date.getMonth() + 3) / 3),\r\n            \"S\": date.getMilliseconds()\r\n        };\r\n        if (/(y+)/.test(fmt))\r\n            fmt = fmt.replace(RegExp.$1, (date.getFullYear() + \"\").substr(4 - RegExp.$1.length));\r\n        for (var k in o)\r\n            if (new RegExp(\"(\" + k + \")\").test(fmt))\r\n                fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : ((\"00\" + o[k]).substr((\"\" + o[k]).length)));\r\n        return fmt;\r\n    }\r\n    Common.formatDate = formatDate;\r\n    function stringTob2Vec2(points) {\r\n        let polyVertices = [];\r\n        let pointStrArr = points.split(\",\");\r\n        if (pointStrArr.length % 2 !== 0) {\r\n            return polyVertices;\r\n        }\r\n        for (let i = 0; i < pointStrArr.length; i += 2) {\r\n            let vec = new box2d.b2Vec2();\r\n            vec.x = parseFloat(pointStrArr[i]);\r\n            vec.y = parseFloat(pointStrArr[i + 1]);\r\n            polyVertices.push(vec);\r\n        }\r\n        return polyVertices;\r\n    }\r\n    Common.stringTob2Vec2 = stringTob2Vec2;\r\n    function b2Vec2sToString(arr) {\r\n        let str = \"\";\r\n        let len = arr.length;\r\n        for (let i = 0; i < len; i++) {\r\n            let vec = arr[i];\r\n            str += vec.x + \",\" + vec.y + \",\";\r\n        }\r\n        Log.d(str);\r\n        str = str.substring(0, str.length - 1);\r\n        Log.d(str);\r\n        return str;\r\n    }\r\n    Common.b2Vec2sToString = b2Vec2sToString;\r\n    function pointChange(arr) {\r\n        let result = [];\r\n        let len = arr.length;\r\n        for (let i = 0; i < len; i++) {\r\n            let vec = arr[i];\r\n            result.push(vec.x);\r\n            result.push(vec.y);\r\n        }\r\n        Log.d(result);\r\n        return result;\r\n    }\r\n    Common.pointChange = pointChange;\r\n    function startWidth(str, reg) {\r\n        if (!str)\r\n            return false;\r\n        if (!reg)\r\n            return false;\r\n        return str.indexOf(reg) == 0;\r\n    }\r\n    Common.startWidth = startWidth;\r\n    function checkForUpdate() {\r\n        if (typeof wx.getUpdateManager === 'function') {\r\n            const updateManager = wx.getUpdateManager();\r\n            updateManager.onCheckForUpdate(function (res) {\r\n                Log.d(\"版本更新信息：\");\r\n                Log.d(res.hasUpdate);\r\n            });\r\n            updateManager.onUpdateReady(function () {\r\n            });\r\n        }\r\n    }\r\n    Common.checkForUpdate = checkForUpdate;\r\n})(Common || (Common = {}));\r\nexport function grayView(view) {\r\n    var grayMat = [\r\n        .3086, .6094, .082, 0, 0, .3086, .6094, .082, 0, 0, .3086, .6094, .082, 0, 0, 0, 0, 0, 1, 0\r\n    ];\r\n    var grayFilter = new Laya.ColorFilter(grayMat);\r\n    view.filters = (view.filters ? (view.filters.push(grayFilter), view.filters) : [grayFilter]);\r\n}\r\nexport function lightViewAni(view, isLoop, color) {\r\n    let blurColor = color ? color : \"#ffee82\";\r\n    var glowFilter = new Laya.GlowFilter(blurColor, 0, 0, 0);\r\n    let obj = {\r\n        value: 25\r\n    };\r\n    Laya.Tween.to(obj, {\r\n        value: 100,\r\n        update: Laya.Handler.create(view, function () {\r\n            glowFilter.blur = obj.value;\r\n            view.filters = [glowFilter];\r\n        }, null, false)\r\n    }, 500, null, Laya.Handler.create(view, function () {\r\n        Laya.Tween.to(obj, {\r\n            value: 0,\r\n            update: Laya.Handler.create(view, function () {\r\n                glowFilter.blur = obj.value;\r\n                view.filters = [glowFilter];\r\n            }, null, false)\r\n        }, 500, null, Laya.Handler.create(view, function () {\r\n            if (isLoop) {\r\n                lightViewAni(view, isLoop);\r\n            }\r\n        }));\r\n    }));\r\n}\r\nexport function grayViewAni(view, callback) {\r\n    let obj = {\r\n        value: 0\r\n    };\r\n    let grayFilter = new Laya.ColorFilter();\r\n    Laya.Tween.to(obj, {\r\n        value: 1,\r\n        update: Laya.Handler.create(view, function () {\r\n            let grayMat = [\r\n                .3086, .6094, .082, 0, 0, .3086, .6094, .082, 0, 0, .3086, .6094, .082, 0, 0, 0, 0, 0, obj.value, 0\r\n            ];\r\n            grayFilter.setByMatrix(grayMat);\r\n            view.filters = [grayFilter];\r\n        }, null, false)\r\n    }, 300, null, Laya.Handler.create(view, function () {\r\n        if (callback) {\r\n            callback();\r\n        }\r\n    }));\r\n}\r\nexport function sharkAni(caller, view, count, times, callBack) {\r\n    var index = count ? count : 0;\r\n    var r = index % 4 === 0 ? 15 : (index % 4 === 1 ? 0 : (index % 4 === 2 ? -15 : 0));\r\n    Laya.Tween.to(view, {\r\n        rotation: r\r\n    }, 250, Laya.Ease.linearInOut, Laya.Handler.create(caller, function () {\r\n        if (index <= (4 * (times ? times : 0))) {\r\n            sharkAni(caller, view, index + 1, times, callBack);\r\n        }\r\n        else {\r\n            if (callBack) {\r\n                callBack();\r\n            }\r\n        }\r\n    }));\r\n}\r\nexport function drawLine(sprite, startPos, endPos) {\r\n    sprite.graphics.drawLine(startPos.x, startPos.y, endPos.x, endPos.y, AppConfig.LINE_COLOR, AppConfig.LINE_WIDTH);\r\n    return getDistance(startPos, endPos);\r\n}\r\nexport function getDistance(p1, p2) {\r\n    return Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));\r\n}\r\nexport function getPointAngle(point1, point2) {\r\n    if (point2.x == point1.x && point2.y == point1.y) {\r\n        return 0;\r\n    }\r\n    if (point2.x > point1.x && point2.y > point1.y) {\r\n        return Math.atan((point2.y - point1.y) / (point2.x - point1.x)) / Math.PI * 180;\r\n    }\r\n    else if (point2.x < point1.x && point2.y > point1.y) {\r\n        return Math.atan((point1.x - point2.x) / (point2.y - point1.y)) / Math.PI * 180 + 90;\r\n    }\r\n    else if (point2.x < point1.x && point2.y < point1.y) {\r\n        return Math.atan((point1.y - point2.y) / (point1.x - point2.x)) / Math.PI * 180 + 180;\r\n    }\r\n    else if (point2.x > point1.x && point2.y < point1.y) {\r\n        return Math.atan((point2.x - point1.x) / (point1.y - point2.y)) / Math.PI * 180 + 270;\r\n    }\r\n    if (point2.x == point1.x && point2.y > point1.y) {\r\n        return 90;\r\n    }\r\n    else if (point2.x == point1.x && point2.y < point1.y) {\r\n        return 270;\r\n    }\r\n    else if (point2.x > point1.x && point2.y == point1.y) {\r\n        return 360;\r\n    }\r\n    else {\r\n        return 180;\r\n    }\r\n}\r\nexport function drawRect(sprite, points) {\r\n    Log.d('绘制矩形：');\r\n    Log.d(points);\r\n    let g = sprite.graphics;\r\n    g.drawPoly(0, 0, points, AppConfig.LINE_COLOR);\r\n}\r\nexport function showModal(data) {\r\n    UiManager.getSelf().showModal(data);\r\n}\r\n",
  "references": [
    "E:/game/Growup/Laya2Framework/Framework/Framework/src/utils/Log.ts",
    "E:/game/Growup/Laya2Framework/Framework/Framework/src/AppConfig.ts",
    "E:/game/Growup/Laya2Framework/Framework/Framework/src/UiManager.ts"
  ]
}
